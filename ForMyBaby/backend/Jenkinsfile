pipeline {
    agent any
    environment {
        REPO = "s10-ai-image-sub2/S10P22C202.git"
//         DB_URL = "${env.DB_URL}"
//         DB_USER = "${env.DB_USER}"
//         DB_PASSWORD = "${env.DB_PASSWORD}"
//         REDIS_HOST = "${env.REDIS_HOST}"
//         REDIS_PASSWORD = "${env.REDIS_PASSWORD}"
//         REDIS_PORT = "${env.REDIS_PORT}"
//         MAIL_ID = "${env.MAIL_ID}"
//         MAIL_PASSWORD = "${env.MAIL_PASSWORD}"
//         MAIL_PORT = "${env.MAIL_PORT}"
    }
    stages {
        stage('Checkout') {
            steps {
                    checkout scm
//                 checkout scmGit(
//                         branches: [[name: 'be']],
// //                         extensions: [submodule(parentCredentials: true, trackingSubmodules: true)],
//                         userRemoteConfigs: [[credentialsId: 'GitLab-Project-access-Token', url: 'https://lab.ssafy.com/s10-webmobile1-sub2/S10P12C202.git']]
//                 )
            }
        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/develop_be"){
                    script {
                        sh "ls -al"
                        sh "ls ./src/main/resources"
                        sh "chmod +x ./gradlew"
                        sh "cat ./src/main/resources/application.yml"
                    }
                }
            }
        }

        stage("Build") {
                steps {
                    script {
                        sh "ls -al"
                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                            echo "도커허브 아이디: ${DOCKER_USER_ID}"
                            echo "도커허브 비밀번호: ${DOCKER_USER_PASSWORD}"
                            sh "docker build --no-cache -t ${DOCKER_USER_ID}/back ForMyBaby/backend"
                        }
                    }
                }
        }

        stage("Login") {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                    sh """
                        set +x
                        echo $DOCKER_USER_PASSWORD | docker login -u $DOCKER_USER_ID --password-stdin
                        set -x
                    """
                }
            }
        }

        stage("Tag and Push") {
            steps {
                script {
                     withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker push ${DOCKER_USER_ID}/back"
                     }
                }
            }
        }
        stage('Prune old images'){
            steps{
                script{
                    sh "docker ps"
//                     sh "docker system prune --filter until=10h"
                }
            }
        }
        stage('Pull') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
//                         sh "docker stop back || true"  // Ignore error ifgit  container doesn't exist
//                         sh "docker rm back || true"    // Ignore error if container doesn't exist
//                         sh "docker rmi hyeiiin/back"     //images 날리기
                        sh "docker pull ${DOCKER_USER_ID}/back"
                    }
                }
            }
        }
        stage('Up') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        try{
                            sh "docker rm -f back || true"
                            sh "docker ps"
                            sh "docker run -d --name back -p 8082:8080 hyeiiin/back"
                        } catch (Exception e){
                            sh "docker restart back || true"  // Ignore error if container doesn't exist
                        }
                    }
                }
            }
        }
    }
//     post {
//         always {
//             script {
//                 def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
//                 def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
//                 mattermostSend (color: 'good',
//                         message: "빌드 ${currentBuild.currentResult}: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
//                         endpoint: 'https://meeting.ssafy.com/hooks/q4qjarpscbf9pme4f46yiojzfe',
//                         channel: 'C107-Jenkins'
//                 )
//             }
//         }
//     }
}