pipeline {
    agent any
    environment {
        REPO = "s10-ai-image-sub2/S10P22C202"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage("Build") {
            steps {
                script {
                    sh "pwd"
                    sh "ls -al"
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker build -t ${DOCKER_USER_ID}/ai_node ForMyBaby/ai/workspace/express-network"
                        sh "docker build -t ${DOCKER_USER_ID}/ai_py ForMyBaby/ai/workspace/python-logic"
                    }
                }
            }
        }
        stage("Login") {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                    sh """
                        set +x
                        echo $DOCKER_USER_PASSWORD | docker login -u $DOCKER_USER_ID --password-stdin
                        set -x
                    """
                }
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                     withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker push ${DOCKER_USER_ID}/ai_node"
                        sh "docker push ${DOCKER_USER_ID}/ai_py"
                     }
                }
            }
        }
        // stage('Prune old images'){
        //     steps{
        //         script{
        //         }
        //     }
        // }
        stage('Pull') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker pull ${DOCKER_USER_ID}/ai_node"
                        sh "docker pull ${DOCKER_USER_ID}/ai_py"
                    }
                }
            }
        }
        stage('Up') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        try{
                            sh "docker stop -f ai_node || true"
                            sh "docker rm -f ai_node || true"
                            sh "docker run -d --name ai_node -p 8083:8083 ${DOCKER_USER_ID}/ai_node"
                            sh "docker stop -f ai_py || true"
                            sh "docker rm -f ai_py || true"
                            sh "docker run -d --name ai_py -p 8084:8083 ${DOCKER_USER_ID}/ai_py"
                        } catch (Exception e){
                            sh "docker restart ai_node"
                            sh "docker restart ai_py"
                        }
                    }
                }
            }
        }
    }

post {
        success {
            script {
                mattermostSend (color: 'good',
                message: "AI 배포 성공   :cat_jump: :loopy_happy: :bboong: ",
                )
            }
        }
        failure {
            script {
                mattermostSend (color: 'danger',
                message: "AI 배포 실패   :cry_tom: :cryingloopy: :cryingpatamon: "
                )
            }
        }
    }
}
